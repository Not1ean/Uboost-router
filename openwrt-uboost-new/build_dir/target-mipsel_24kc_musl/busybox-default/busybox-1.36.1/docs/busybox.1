.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "BUSYBOX 1"
.TH BUSYBOX 1 2024-03-22 "version 1.36.1" busybox
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
BusyBox \- The Swiss Army Knife of Embedded Linux
.SH SYNTAX
.IX Header "SYNTAX"
.Vb 1
\& busybox <applet> [arguments...]  # or
\&
\& <applet> [arguments...]          # if symlinked
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
BusyBox combines tiny versions of many common UNIX utilities into a single
small executable. It provides minimalist replacements for most of the utilities
you usually find in GNU coreutils, util-linux, etc. The utilities in BusyBox
generally have fewer options than their full-featured GNU cousins; however, the
options that are included provide the expected functionality and behave very
much like their GNU counterparts.
.PP
BusyBox has been written with size-optimization and limited resources in mind.
It is also extremely modular so you can easily include or exclude commands (or
features) at compile time. This makes it easy to customize your embedded
systems. To create a working system, just add /dev, /etc, and a Linux kernel.
BusyBox provides a fairly complete POSIX environment for any small or embedded
system.
.PP
BusyBox is extremely configurable.  This allows you to include only the
components you need, thereby reducing binary size. Run 'make config' or 'make
menuconfig' to select the functionality that you wish to enable.  Then run
\&'make' to compile BusyBox using your configuration.
.PP
After the compile has finished, you should use 'make install' to install
BusyBox. This will install the 'bin/busybox' binary, in the target directory
specified by CONFIG_PREFIX. CONFIG_PREFIX can be set when configuring BusyBox,
or you can specify an alternative location at install time (i.e., with a
command line like 'make CONFIG_PREFIX=/tmp/foo install'). If you enabled
any applet installation scheme (either as symlinks or hardlinks), these will
also be installed in the location pointed to by CONFIG_PREFIX.
.SH USAGE
.IX Header "USAGE"
BusyBox is a multi-call binary.  A multi-call binary is an executable program
that performs the same job as more than one utility program.  That means there
is just a single BusyBox binary, but that single binary acts like a large
number of utilities.  This allows BusyBox to be smaller since all the built-in
utility programs (we call them applets) can share code for many common
operations.
.PP
You can also invoke BusyBox by issuing a command as an argument on the
command line.  For example, entering
.PP
.Vb 1
\&        /bin/busybox ls
.Ve
.PP
will also cause BusyBox to behave as 'ls'.
.PP
Of course, adding '/bin/busybox' into every command would be painful.  So most
people will invoke BusyBox using links to the BusyBox binary.
.PP
For example, entering
.PP
.Vb 2
\&        ln \-s /bin/busybox ls
\&        ./ls
.Ve
.PP
will cause BusyBox to behave as 'ls' (if the 'ls' command has been compiled
into BusyBox).  Generally speaking, you should never need to make all these
links yourself, as the BusyBox build system will do this for you when you run
the 'make install' command.
.PP
If you invoke BusyBox with no arguments, it will provide you with a list of the
applets that have been compiled into your BusyBox binary.
.SH "COMMON OPTIONS"
.IX Header "COMMON OPTIONS"
Most BusyBox applets support the \fB\-\-help\fR argument to provide a terse runtime
description of their behavior.  If the CONFIG_FEATURE_VERBOSE_USAGE option has
been enabled, more detailed usage information will also be available.
.SH COMMANDS
.IX Header "COMMANDS"
Currently available applets include:
.PP
.Vb 10
\&        [, [[, ash, awk, basename, brctl, cat, chgrp, chmod, chown, chroot,
\&        clear, cmp, cp, crond, crontab, cut, date, dd, df, dirname, dmesg,
\&        du, echo, egrep, env, expr, false, fgrep, find, flock, free, fsync,
\&        grep, gunzip, gzip, halt, head, hexdump, hwclock, id, ifconfig, ip,
\&        kill, killall, less, ln, lock, logger, login, ls, md5sum, mkdir,
\&        mkfifo, mknod, mkswap, mktemp, mount, mv, nc, netmsg, netstat, nice,
\&        nslookup, ntpd, passwd, pgrep, pidof, ping, ping6, pivot_root,
\&        poweroff, printf, ps, pwd, readlink, reboot, reset, resize, rm,
\&        rmdir, route, sed, seq, sh, sha256sum, sleep, sort,
\&        start\-stop\-daemon, strings, swapoff, swapon, switch_root, sync,
\&        sysctl, tail, tar, taskset, tee, test, time, top, touch, tr,
\&        traceroute, traceroute6, true, udhcpc, umount, uname, uniq, uptime,
\&        vi, wc, which, xargs, yes, zcat
.Ve
.SH "COMMAND DESCRIPTIONS"
.IX Header "COMMAND DESCRIPTIONS"
.IP \fBash\fR 4
.IX Item "ash"
ash [\-il] [\-|+Cabefmnuvx] [\-|+o OPT]... [\-c 'SCRIPT' [ARG0 ARGS] | FILE ARGS | \-s ARGS]
.Sp
Unix shell interpreter
.IP \fBawk\fR 4
.IX Item "awk"
awk [OPTIONS] [AWK_PROGRAM] [FILE]...
.Sp
.Vb 4
\&        \-v VAR=VAL      Set variable
\&        \-F SEP          Use SEP as field separator
\&        \-f FILE         Read program from FILE
\&        \-e AWK_PROGRAM
.Ve
.IP \fBbasename\fR 4
.IX Item "basename"
basename FILE [SUFFIX] | \-a FILE... | \-s SUFFIX FILE...
.Sp
Strip directory path and SUFFIX from FILE
.Sp
.Vb 2
\&        \-a              All arguments are FILEs
\&        \-s SUFFIX       Remove SUFFIX (implies \-a)
.Ve
.IP \fBbrctl\fR 4
.IX Item "brctl"
brctl COMMAND [BRIDGE [ARGS]]
.Sp
Manage ethernet bridges
Commands:
.Sp
.Vb 10
\&        show [BRIDGE]...        Show bridges
\&        addbr BRIDGE            Create BRIDGE
\&        delbr BRIDGE            Delete BRIDGE
\&        addif BRIDGE IFACE      Add IFACE to BRIDGE
\&        delif BRIDGE IFACE      Delete IFACE from BRIDGE
\&        showmacs BRIDGE                 List MAC addresses
\&        showstp BRIDGE                  Show STP info
\&        stp BRIDGE 1/yes/on|0/no/off    Set STP on/off
\&        setageing BRIDGE SECONDS        Set ageing time
\&        setfd BRIDGE SECONDS            Set bridge forward delay
\&        sethello BRIDGE SECONDS         Set hello time
\&        setmaxage BRIDGE SECONDS        Set max message age
\&        setbridgeprio BRIDGE PRIO       Set bridge priority
\&        setportprio BRIDGE IFACE PRIO   Set port priority
\&        setpathcost BRIDGE IFACE COST   Set path cost
.Ve
.IP \fBcat\fR 4
.IX Item "cat"
cat [FILE]...
.Sp
Print FILEs to stdout
.IP \fBchgrp\fR 4
.IX Item "chgrp"
chgrp [\-Rh]... GROUP FILE...
.Sp
Change the group membership of FILEs to GROUP
.Sp
.Vb 2
\&        \-h      Affect symlinks instead of symlink targets
\&        \-R      Recurse
.Ve
.IP \fBchmod\fR 4
.IX Item "chmod"
chmod [\-R] MODE[,MODE]... FILE...
.Sp
MODE is octal number (bit pattern sstrwxrwxrwx) or [ugoa]{+|\-|=}[rwxXst]
.Sp
.Vb 1
\&        \-R      Recurse
.Ve
.IP \fBchown\fR 4
.IX Item "chown"
chown [\-Rh]... USER[:[GRP]] FILE...
.Sp
Change the owner and/or group of FILEs to USER and/or GRP
.Sp
.Vb 2
\&        \-h      Affect symlinks instead of symlink targets
\&        \-R      Recurse
.Ve
.IP \fBchroot\fR 4
.IX Item "chroot"
chroot NEWROOT [PROG ARGS]
.Sp
Run PROG with root directory set to NEWROOT
.IP \fBclear\fR 4
.IX Item "clear"
clear
.Sp
Clear screen
.IP \fBcmp\fR 4
.IX Item "cmp"
cmp [\-ls] [\-n NUM] FILE1 [FILE2]
.Sp
Compare FILE1 with FILE2 (or stdin)
.Sp
.Vb 4
\&        \-l      Write the byte numbers (decimal) and values (octal)
\&                for all differing bytes
\&        \-s      Quiet
\&        \-n NUM  Compare at most NUM bytes
.Ve
.IP \fBcp\fR 4
.IX Item "cp"
cp [\-arPLHpfinlsTu] SOURCE DEST
or: cp [\-arPLHpfinlsu] SOURCE... { \-t DIRECTORY | DIRECTORY }
.Sp
Copy SOURCEs to DEST
.Sp
.Vb 10
\&        \-a      Same as \-dpR
\&        \-R,\-r   Recurse
\&        \-d,\-P   Preserve symlinks (default if \-R)
\&        \-L      Follow all symlinks
\&        \-H      Follow symlinks on command line
\&        \-p      Preserve file attributes if possible
\&        \-f      Overwrite
\&        \-i      Prompt before overwrite
\&        \-n      Don\*(Aqt overwrite
\&        \-l,\-s   Create (sym)links
\&        \-T      Refuse to copy if DEST is a directory
\&        \-t DIR  Copy all SOURCEs into DIR
\&        \-u      Copy only newer files
.Ve
.IP \fBcrond\fR 4
.IX Item "crond"
crond [\-fbS] [\-l N] [\-L LOGFILE] [\-c DIR]
.Sp
.Vb 6
\&        \-f      Foreground
\&        \-b      Background (default)
\&        \-S      Log to syslog (default)
\&        \-l N    Set log level. Most verbose 0, default 8
\&        \-L FILE Log to FILE
\&        \-c DIR  Cron dir. Default:/etc/crontabs
.Ve
.IP \fBcrontab\fR 4
.IX Item "crontab"
crontab [\-c DIR] [\-u USER] [\-ler]|[FILE]
.Sp
.Vb 6
\&        \-c      Crontab directory
\&        \-u      User
\&        \-l      List crontab
\&        \-e      Edit crontab
\&        \-r      Delete crontab
\&        FILE    Replace crontab by FILE (\*(Aq\-\*(Aq: stdin)
.Ve
.IP \fBcut\fR 4
.IX Item "cut"
cut [OPTIONS] [FILE]...
.Sp
Print selected fields from FILEs to stdout
.Sp
.Vb 8
\&        \-b LIST Output only bytes from LIST
\&        \-c LIST Output only characters from LIST
\&        \-d SEP  Field delimiter for input (default \-f TAB, \-F run of whitespace)
\&        \-O SEP  Field delimeter for output (default = \-d for \-f, one space for \-F)
\&        \-D      Don\*(Aqt sort/collate sections or match \-fF lines without delimeter
\&        \-f LIST Print only these fields (\-d is single char)
\&        \-s      Output only lines containing delimiter
\&        \-n      Ignored
.Ve
.IP \fBdate\fR 4
.IX Item "date"
date [OPTIONS] [+FMT] [[\-s] TIME]
.Sp
Display time (using +FMT), or set time
.Sp
.Vb 8
\&        \-u              Work in UTC (don\*(Aqt convert to local time)
\&        [\-s] TIME       Set time to TIME
\&        \-d TIME         Display TIME, not \*(Aqnow\*(Aq
\&        \-D FMT          FMT (strptime format) for \-s/\-d TIME conversion
\&        \-r FILE         Display last modification time of FILE
\&        \-R              Output RFC\-2822 date
\&        \-I[SPEC]        Output ISO\-8601 date
\&                        SPEC=date (default), hours, minutes, seconds or ns
.Ve
.Sp
Recognized TIME formats:
.Sp
.Vb 5
\&        @seconds_since_1970
\&        hh:mm[:ss]
\&        [YYYY.]MM.DD\-hh:mm[:ss]
\&        YYYY\-MM\-DD hh:mm[:ss]
\&        [[[[[YY]YY]MM]DD]hh]mm[.ss]
.Ve
.IP \fBdd\fR 4
.IX Item "dd"
dd [if=FILE] [of=FILE] [ibs=N obs=N/bs=N] [count=N] [skip=N] [seek=N]
	[conv=notrunc|noerror|sync|fsync]
	[iflag=skip_bytes|count_bytes|fullblock|direct] [oflag=seek_bytes|append|direct]
.Sp
Copy a file with converting and formatting
.Sp
.Vb 10
\&        if=FILE         Read from FILE instead of stdin
\&        of=FILE         Write to FILE instead of stdout
\&        bs=N            Read and write N bytes at a time
\&        ibs=N           Read N bytes at a time
\&        obs=N           Write N bytes at a time
\&        count=N         Copy only N input blocks
\&        skip=N          Skip N input blocks
\&        seek=N          Skip N output blocks
\&        conv=notrunc    Don\*(Aqt truncate output file
\&        conv=noerror    Continue after read errors
\&        conv=sync       Pad blocks with zeros
\&        conv=fsync      Physically write data out before finishing
\&        conv=swab       Swap every pair of bytes
\&        iflag=skip_bytes        skip=N is in bytes
\&        iflag=count_bytes       count=N is in bytes
\&        oflag=seek_bytes        seek=N is in bytes
\&        iflag=direct    O_DIRECT input
\&        oflag=direct    O_DIRECT output
\&        iflag=fullblock Read full blocks
\&        oflag=append    Open output in append mode
.Ve
.Sp
N may be suffixed by c (1), w (2), b (512), kB (1000), k (1024), MB, M, GB, G
.IP \fBdf\fR 4
.IX Item "df"
df [\-PkmhT] [\-t TYPE] [FILESYSTEM]...
.Sp
Print filesystem usage statistics
.Sp
.Vb 6
\&        \-P      POSIX output format
\&        \-k      1024\-byte blocks (default)
\&        \-m      1M\-byte blocks
\&        \-h      Human readable (e.g. 1K 243M 2G)
\&        \-T      Print filesystem type
\&        \-t TYPE Print only mounts of this type
.Ve
.IP \fBdirname\fR 4
.IX Item "dirname"
dirname FILENAME
.Sp
Strip non-directory suffix from FILENAME
.IP \fBdmesg\fR 4
.IX Item "dmesg"
dmesg [\-cr] [\-n LEVEL] [\-s SIZE]
.Sp
Print or control the kernel ring buffer
.Sp
.Vb 4
\&        \-c              Clear ring buffer after printing
\&        \-n LEVEL        Set console logging level
\&        \-s SIZE         Buffer size
\&        \-r              Print raw message buffer
.Ve
.IP \fBdu\fR 4
.IX Item "du"
du [\-aHLdclsxhmk] [FILE]...
.Sp
Summarize disk space used for FILEs (or directories)
.Sp
.Vb 12
\&        \-a      Show file sizes too
\&        \-b      Apparent size (including holes)
\&        \-L      Follow all symlinks
\&        \-H      Follow symlinks on command line
\&        \-d N    Limit output to directories (and files with \-a) of depth < N
\&        \-c      Show grand total
\&        \-l      Count sizes many times if hard linked
\&        \-s      Display only a total for each argument
\&        \-x      Skip directories on different filesystems
\&        \-h      Sizes in human readable format (e.g., 1K 243M 2G)
\&        \-m      Sizes in megabytes
\&        \-k      Sizes in kilobytes (default)
.Ve
.IP \fBecho\fR 4
.IX Item "echo"
echo [\-neE] [ARG]...
.Sp
Print ARGs to stdout
.Sp
.Vb 3
\&        \-n      No trailing newline
\&        \-e      Interpret backslash escapes (\et=tab etc)
\&        \-E      Don\*(Aqt interpret backslash escapes (default)
.Ve
.IP \fBenv\fR 4
.IX Item "env"
env [\-i0] [\-u NAME]... [\-] [NAME=VALUE]... [PROG ARGS]
.Sp
Print current environment or run PROG after setting up environment
.Sp
.Vb 3
\&        \-, \-i   Start with empty environment
\&        \-0      NUL terminated output
\&        \-u NAME Remove variable from environment
.Ve
.IP \fBexpr\fR 4
.IX Item "expr"
expr EXPRESSION
.Sp
Print the value of EXPRESSION
.Sp
EXPRESSION may be:
.Sp
.Vb 10
\&        ARG1 | ARG2     ARG1 if it is neither null nor 0, otherwise ARG2
\&        ARG1 & ARG2     ARG1 if neither argument is null or 0, otherwise 0
\&        ARG1 < ARG2     1 if ARG1 is less than ARG2, else 0. Similarly:
\&        ARG1 <= ARG2
\&        ARG1 = ARG2
\&        ARG1 != ARG2
\&        ARG1 >= ARG2
\&        ARG1 > ARG2
\&        ARG1 + ARG2     Sum of ARG1 and ARG2. Similarly:
\&        ARG1 \- ARG2
\&        ARG1 * ARG2
\&        ARG1 / ARG2
\&        ARG1 % ARG2
\&        STRING : REGEXP         Anchored pattern match of REGEXP in STRING
\&        match STRING REGEXP     Same as STRING : REGEXP
\&        substr STRING POS LEN   Substring of STRING, POS counts from 1
\&        index STRING CHARS      Index in STRING where any CHARS is found, or 0
\&        length STRING           Length of STRING
\&        quote TOKEN             Interpret TOKEN as a string, even if
\&                                it is a keyword like \*(Aqmatch\*(Aq or an
\&                                operator like \*(Aq/\*(Aq
\&        (EXPRESSION)            Value of EXPRESSION
.Ve
.Sp
Beware that many operators need to be escaped or quoted for shells.
Comparisons are arithmetic if both ARGs are numbers, else
lexicographical. Pattern matches return the string matched between
\&\e( and \e) or null; if \e( and \e) are not used, they return the number
of characters matched or 0.
.IP \fBfind\fR 4
.IX Item "find"
find [\-HL] [PATH]... [OPTIONS] [ACTIONS]
.Sp
Search for files and perform actions on them.
First failed action stops processing of current file.
Defaults: PATH is current directory, action is '\-print'
.Sp
.Vb 7
\&        \-L,\-follow      Follow symlinks
\&        \-H              ...on command line only
\&        \-xdev           Don\*(Aqt descend directories on other filesystems
\&        \-maxdepth N     Descend at most N levels. \-maxdepth 0 applies
\&                        actions to command line arguments only
\&        \-mindepth N     Don\*(Aqt act on first N levels
\&        \-depth          Act on directory *after* traversing it
.Ve
.Sp
Actions:
.Sp
.Vb 10
\&        ( ACTIONS )     Group actions for \-o / \-a
\&        ! ACT           Invert ACT\*(Aqs success/failure
\&        ACT1 [\-a] ACT2  If ACT1 fails, stop, else do ACT2
\&        ACT1 \-o ACT2    If ACT1 succeeds, stop, else do ACT2
\&                        Note: \-a has higher priority than \-o
\&        \-name PATTERN   Match file name (w/o directory name) to PATTERN
\&        \-iname PATTERN  Case insensitive \-name
\&        \-path PATTERN   Match path to PATTERN
\&        \-ipath PATTERN  Case insensitive \-path
\&        \-regex PATTERN  Match path to regex PATTERN
\&        \-type X         File type is X (one of: f,d,l,b,c,s,p)
\&        \-perm MASK      At least one mask bit (+MASK), all bits (\-MASK),
\&                        or exactly MASK bits are set in file\*(Aqs mode
\&        \-mtime DAYS     mtime is greater than (+N), less than (\-N),
\&                        or exactly N days in the past
\&        \-mmin MINS      mtime is greater than (+N), less than (\-N),
\&                        or exactly N minutes in the past
\&        \-newer FILE     mtime is more recent than FILE\*(Aqs
\&        \-user NAME/ID   File is owned by given user
\&        \-group NAME/ID  File is owned by given group
\&        \-size N[bck]    File size is N (c:bytes,k:kbytes,b:512 bytes(def.))
\&                        +/\-N: file size is bigger/smaller than N
\&        \-prune          If current file is directory, don\*(Aqt descend into it
\&If none of the following actions is specified, \-print is assumed
\&        \-print          Print file name
\&        \-print0         Print file name, NUL terminated
\&        \-exec CMD ARG ; Run CMD with all instances of {} replaced by
\&                        file name. Fails if CMD exits with nonzero
.Ve
.IP \fBflock\fR 4
.IX Item "flock"
flock [\-sxun] FD | { FILE [\-c] PROG ARGS }
.Sp
[Un]lock file descriptor, or lock FILE, run PROG
.Sp
.Vb 4
\&        \-s      Shared lock
\&        \-x      Exclusive lock (default)
\&        \-u      Unlock FD
\&        \-n      Fail rather than wait
.Ve
.IP \fBfree\fR 4
.IX Item "free"
free
.Sp
Display free and used memory
.IP \fBfsync\fR 4
.IX Item "fsync"
fsync [\-d] FILE...
.Sp
Write all buffered blocks in FILEs to disk
.Sp
.Vb 1
\&        \-d      Avoid syncing metadata
.Ve
.IP \fBgrep\fR 4
.IX Item "grep"
grep [\-HhnlLoqvsrRiwFE] [\-m N] [\-A|B|C N] { PATTERN | \-e PATTERN... | \-f FILE... } [FILE]...
.Sp
Search for PATTERN in FILEs (or stdin)
.Sp
.Vb 10
\&        \-H      Add \*(Aqfilename:\*(Aq prefix
\&        \-h      Do not add \*(Aqfilename:\*(Aq prefix
\&        \-n      Add \*(Aqline_no:\*(Aq prefix
\&        \-l      Show only names of files that match
\&        \-L      Show only names of files that don\*(Aqt match
\&        \-c      Show only count of matching lines
\&        \-o      Show only the matching part of line
\&        \-q      Quiet. Return 0 if PATTERN is found, 1 otherwise
\&        \-v      Select non\-matching lines
\&        \-s      Suppress open and read errors
\&        \-r      Recurse
\&        \-R      Recurse and dereference symlinks
\&        \-i      Ignore case
\&        \-w      Match whole words only
\&        \-x      Match whole lines only
\&        \-F      PATTERN is a literal (not regexp)
\&        \-E      PATTERN is an extended regexp
\&        \-m N    Match up to N times per file
\&        \-A N    Print N lines of trailing context
\&        \-B N    Print N lines of leading context
\&        \-C N    Same as \*(Aq\-A N \-B N\*(Aq
\&        \-e PTRN Pattern to match
\&        \-f FILE Read pattern from file
.Ve
.IP \fBgunzip\fR 4
.IX Item "gunzip"
gunzip [\-cfkt] [FILE]...
.Sp
Decompress FILEs (or stdin)
.Sp
.Vb 4
\&        \-c      Write to stdout
\&        \-f      Force
\&        \-k      Keep input files
\&        \-t      Test integrity
.Ve
.IP \fBgzip\fR 4
.IX Item "gzip"
gzip [\-cfkdt] [FILE]...
.Sp
Compress FILEs (or stdin)
.Sp
.Vb 5
\&        \-d      Decompress
\&        \-c      Write to stdout
\&        \-f      Force
\&        \-k      Keep input files
\&        \-t      Test integrity
.Ve
.IP \fBhalt\fR 4
.IX Item "halt"
halt [\-d DELAY] [\-nf]
.Sp
Halt the system
.Sp
.Vb 3
\&        \-d SEC  Delay interval
\&        \-n      Do not sync
\&        \-f      Force (don\*(Aqt go through init)
.Ve
.IP \fBhead\fR 4
.IX Item "head"
head [OPTIONS] [FILE]...
.Sp
Print first 10 lines of FILEs (or stdin).
With more than one FILE, precede each with a filename header.
.Sp
.Vb 6
\&        \-n N[bkm]       Print first N lines
\&        \-n \-N[bkm]      Print all except N last lines
\&        \-c [\-]N[bkm]    Print first N bytes
\&                        (b:*512 k:*1024 m:*1024^2)
\&        \-q              Never print headers
\&        \-v              Always print headers
.Ve
.IP \fBhexdump\fR 4
.IX Item "hexdump"
hexdump [\-bcdoxCv] [\-e FMT] [\-f FMT_FILE] [\-n LEN] [\-s OFS] [FILE]...
.Sp
Display FILEs (or stdin) in a user specified format
.Sp
.Vb 11
\&        \-b              1\-byte octal display
\&        \-c              1\-byte character display
\&        \-d              2\-byte decimal display
\&        \-o              2\-byte octal display
\&        \-x              2\-byte hex display
\&        \-C              hex+ASCII 16 bytes per line
\&        \-v              Show all (no dup folding)
\&        \-e FORMAT_STR   Example: \*(Aq16/1 "%02x|""\en"\*(Aq
\&        \-f FORMAT_FILE
\&        \-n LENGTH       Show only first LENGTH bytes
\&        \-s OFFSET       Skip OFFSET bytes
.Ve
.IP \fBhwclock\fR 4
.IX Item "hwclock"
hwclock [\-swul] [\-\-systz] [\-f DEV]
.Sp
Show or set hardware clock (RTC)
.Sp
.Vb 8
\&        \-s      Set system time from RTC
\&        \-w      Set RTC from system time
\&        \-\-systz Set in\-kernel timezone, correct system time
\&                if RTC is kept in local time
\&        \-f DEV  Use specified device (e.g. /dev/rtc2)
\&        \-u      Assume RTC is kept in UTC
\&        \-l      Assume RTC is kept in local time
\&                (if neither is given, read from /etc/adjtime)
.Ve
.IP \fBid\fR 4
.IX Item "id"
id [\-ugGnr] [USER]
.Sp
Print information about USER or the current user
.Sp
.Vb 5
\&        \-u      User ID
\&        \-g      Group ID
\&        \-G      Supplementary group IDs
\&        \-n      Print names instead of numbers
\&        \-r      Print real ID instead of effective ID
.Ve
.IP \fBifconfig\fR 4
.IX Item "ifconfig"
ifconfig [\-a] [IFACE] [ADDRESS]
.Sp
Configure a network interface
.Sp
.Vb 8
\&        [add ADDRESS[/PREFIXLEN]]
\&        [del ADDRESS[/PREFIXLEN]]
\&        [[\-]broadcast [ADDRESS]] [[\-]pointopoint [ADDRESS]]
\&        [netmask ADDRESS] [dstaddr ADDRESS]
\&        [hw ether ADDRESS] [metric NN] [mtu NN]
\&        [[\-]trailers] [[\-]arp] [[\-]allmulti]
\&        [multicast] [[\-]promisc] [txqueuelen NN] [[\-]dynamic]
\&        [up|down] ...
.Ve
.IP \fBip\fR 4
.IX Item "ip"
ip [OPTIONS] address|route|link|neigh|rule [ARGS]
.Sp
OPTIONS := \-f[amily] inet|inet6|link | \-o[neline]
.Sp
ip addr add|del IFADDR dev IFACE | show|flush [dev IFACE] [to PREFIX]
ip route list|flush|add|del|change|append|replace|test ROUTE
ip link set IFACE [up|down] [arp on|off] [multicast on|off]
	[promisc on|off] [mtu NUM] [name NAME] [qlen NUM] [address MAC]
	[master IFACE | nomaster] [netns PID]
ip neigh show|flush [to PREFIX] [dev DEV] [nud STATE]
ip rule [list] | add|del SELECTOR ACTION
.IP \fBkill\fR 4
.IX Item "kill"
kill [\-l] [\-SIG] PID...
.Sp
Send a signal (default: TERM) to given PIDs
.Sp
.Vb 1
\&        \-l      List all signal names and numbers
.Ve
.IP \fBkillall\fR 4
.IX Item "killall"
killall [\-lq] [\-SIG] PROCESS_NAME...
.Sp
Send a signal (default: TERM) to given processes
.Sp
.Vb 2
\&        \-l      List all signal names and numbers
\&        \-q      Don\*(Aqt complain if no processes were killed
.Ve
.IP \fBless\fR 4
.IX Item "less"
less [\-EFNh~] [FILE]...
.Sp
View FILE (or stdin) one screenful at a time
.Sp
.Vb 4
\&        \-E      Quit once the end of a file is reached
\&        \-F      Quit if entire file fits on first screen
\&        \-N      Prefix line number to each line
\&        \-~      Suppress ~s displayed past EOF
.Ve
.IP \fBln\fR 4
.IX Item "ln"
ln [\-sfnbtv] [\-S SUF] TARGET... LINK|DIR
.Sp
Create a link LINK or DIR/TARGET to the specified TARGET(s)
.Sp
.Vb 7
\&        \-s      Make symlinks instead of hardlinks
\&        \-f      Remove existing destinations
\&        \-n      Don\*(Aqt dereference symlinks \- treat like normal file
\&        \-b      Make a backup of the target (if exists) before link operation
\&        \-S SUF  Use suffix instead of ~ when making backup files
\&        \-T      Treat LINK as a file, not DIR
\&        \-v      Verbose
.Ve
.IP \fBlogger\fR 4
.IX Item "logger"
logger [\-s] [\-t TAG] [\-p PRIO] [MESSAGE]
.Sp
Write MESSAGE (or stdin) to syslog
.Sp
.Vb 3
\&        \-s      Log to stderr as well as the system log
\&        \-t TAG  Log using the specified tag (defaults to user name)
\&        \-p PRIO Priority (number or FACILITY.LEVEL pair)
.Ve
.IP \fBlogin\fR 4
.IX Item "login"
login [\-p] [\-h HOST] [[\-f] USER]
.Sp
Begin a new session on the system
.Sp
.Vb 3
\&        \-f      Don\*(Aqt authenticate (user already authenticated)
\&        \-h HOST Host user came from (for network logins)
\&        \-p      Preserve environment
.Ve
.Sp
\&\f(CW$LOGIN_TIMEOUT\fR		Seconds (default 60, 0 \- disable)
.IP \fBls\fR 4
.IX Item "ls"
ls [\-1AaCxdLHRFplinshrSXvctu] [\-w WIDTH] [FILE]...
.Sp
List directory contents
.Sp
.Vb 10
\&        \-1      One column output
\&        \-a      Include names starting with .
\&        \-A      Like \-a, but exclude . and ..
\&        \-x      List by lines
\&        \-d      List directory names, not contents
\&        \-L      Follow symlinks
\&        \-H      Follow symlinks on command line
\&        \-R      Recurse
\&        \-p      Append / to directory names
\&        \-F      Append indicator (one of */=@|) to names
\&        \-l      Long format
\&        \-i      List inode numbers
\&        \-n      List numeric UIDs and GIDs instead of names
\&        \-s      List allocated blocks
\&        \-lc     List ctime
\&        \-lu     List atime
\&        \-\-full\-time     List full date/time
\&        \-h      Human readable sizes (1K 243M 2G)
\&        \-\-group\-directories\-first
\&        \-S      Sort by size
\&        \-X      Sort by extension
\&        \-v      Sort by version
\&        \-t      Sort by mtime
\&        \-tc     Sort by ctime
\&        \-tu     Sort by atime
\&        \-r      Reverse sort order
\&        \-w N    Format N columns wide
\&        \-\-color[={always,never,auto}]
.Ve
.IP \fBmd5sum\fR 4
.IX Item "md5sum"
md5sum [\-c[sw]] [FILE]...
.Sp
Print or check MD5 checksums
.Sp
.Vb 3
\&        \-c      Check sums against list in FILEs
\&        \-s      Don\*(Aqt output anything, status code shows success
\&        \-w      Warn about improperly formatted checksum lines
.Ve
.IP \fBmkdir\fR 4
.IX Item "mkdir"
mkdir [\-m MODE] [\-p] DIRECTORY...
.Sp
Create DIRECTORY
.Sp
.Vb 2
\&        \-m MODE Mode
\&        \-p      No error if exists; make parent directories as needed
.Ve
.IP \fBmkfifo\fR 4
.IX Item "mkfifo"
mkfifo [\-m MODE] NAME
.Sp
Create named pipe
.Sp
.Vb 1
\&        \-m MODE Mode (default a=rw)
.Ve
.IP \fBmknod\fR 4
.IX Item "mknod"
mknod [\-m MODE] NAME TYPE [MAJOR MINOR]
.Sp
Create a special file (block, character, or pipe)
.Sp
.Vb 5
\&        \-m MODE Creation mode (default a=rw)
\&TYPE:
\&        b       Block device
\&        c or u  Character device
\&        p       Named pipe (MAJOR MINOR must be omitted)
.Ve
.IP \fBmkswap\fR 4
.IX Item "mkswap"
mkswap [\-L LBL] BLOCKDEV [KBYTES]
.Sp
Prepare BLOCKDEV to be used as swap partition
.Sp
.Vb 1
\&        \-L LBL  Label
.Ve
.IP \fBmktemp\fR 4
.IX Item "mktemp"
mktemp [\-dt] [\-p DIR] [TEMPLATE]
.Sp
Create a temporary file with name based on TEMPLATE and print its name.
TEMPLATE must end with XXXXXX (e.g. [/dir/]nameXXXXXX).
Without TEMPLATE, \-t tmp.XXXXXX is assumed.
.Sp
.Vb 5
\&        \-d      Make directory, not file
\&        \-q      Fail silently on errors
\&        \-t      Prepend base directory name to TEMPLATE
\&        \-p DIR  Use DIR as a base directory (implies \-t)
\&        \-u      Do not create anything; print a name
.Ve
.Sp
Base directory is: \-p DIR, else \f(CW$TMPDIR\fR, else /tmp
.IP \fBmount\fR 4
.IX Item "mount"
mount [OPTIONS] [\-o OPT] DEVICE NODE
.Sp
Mount a filesystem. Filesystem autodetection requires /proc.
.Sp
.Vb 10
\&        \-a              Mount all filesystems in fstab
\&        \-i              Don\*(Aqt run mount helper
\&        \-r              Read\-only mount
\&        \-t FSTYPE[,...] Filesystem type(s)
\&        \-O OPT          Mount only filesystems with option OPT (\-a only)
\&\-o OPT:
\&        loop            Ignored (loop devices are autodetected)
\&        [a]sync         Writes are [a]synchronous
\&        [no]atime       Disable/enable updates to inode access times
\&        [no]diratime    Disable/enable atime updates to directories
\&        [no]relatime    Disable/enable atime updates relative to modification time
\&        [no]dev         (Dis)allow use of special device files
\&        [no]exec        (Dis)allow use of executable files
\&        [no]suid        (Dis)allow set\-user\-id\-root programs
\&        [r]shared       Convert [recursively] to a shared subtree
\&        [r]slave        Convert [recursively] to a slave subtree
\&        [r]private      Convert [recursively] to a private subtree
\&        [un]bindable    Make mount point [un]able to be bind mounted
\&        [r]bind         Bind a file or directory [recursively] to another location
\&        move            Relocate an existing mount point
\&        remount         Remount a mounted filesystem, changing flags
\&        ro              Same as \-r
.Ve
.Sp
There are filesystem-specific \-o flags.
.IP \fBmv\fR 4
.IX Item "mv"
mv [\-finT] SOURCE DEST
or: mv [\-fin] SOURCE... { \-t DIRECTORY | DIRECTORY }
.Sp
Rename SOURCE to DEST, or move SOURCEs to DIRECTORY
.Sp
.Vb 5
\&        \-f      Don\*(Aqt prompt before overwriting
\&        \-i      Interactive, prompt before overwrite
\&        \-n      Don\*(Aqt overwrite an existing file
\&        \-T      Refuse to move if DEST is a directory
\&        \-t DIR  Move all SOURCEs into DIR
.Ve
.IP \fBnc\fR 4
.IX Item "nc"
nc [IPADDR PORT]
.Sp
Open a pipe to IP:PORT
.IP \fBnetstat\fR 4
.IX Item "netstat"
netstat [\-ral] [\-tuwx] [\-enWp]
.Sp
Display networking information
.Sp
.Vb 10
\&        \-r      Routing table
\&        \-a      All sockets
\&        \-l      Listening sockets
\&                Else: connected sockets
\&        \-t      TCP sockets
\&        \-u      UDP sockets
\&        \-w      Raw sockets
\&        \-x      Unix sockets
\&                Else: all socket types
\&        \-e      Other/more information
\&        \-n      Don\*(Aqt resolve names
\&        \-W      Wide display
\&        \-p      Show PID/program name for sockets
.Ve
.IP \fBnice\fR 4
.IX Item "nice"
nice [\-n ADJUST] [PROG ARGS]
.Sp
Change scheduling priority, run PROG
.Sp
.Vb 1
\&        \-n ADJUST       Adjust priority by ADJUST
.Ve
.IP \fBnslookup\fR 4
.IX Item "nslookup"
nslookup [\-type=QUERY_TYPE] [\-debug] HOST [DNS_SERVER]
.Sp
Query DNS about HOST
.Sp
QUERY_TYPE: soa,ns,a,aaaa,cname,mx,txt,ptr,srv,any
.IP \fBntpd\fR 4
.IX Item "ntpd"
ntpd [\-dnqNwl] [\-I IFACE] [\-S PROG] [\-p PEER]...
.Sp
NTP client/server
.Sp
.Vb 9
\&        \-d[d]   Verbose
\&        \-n      Run in foreground
\&        \-q      Quit after clock is set
\&        \-N      Run at high priority
\&        \-w      Do not set time (only query peers), implies \-n
\&        \-S PROG Run PROG after stepping time, stratum change, and every 11 min
\&        \-p PEER Obtain time from PEER (may be repeated)
\&        \-l      Also run as server on port 123
\&        \-I IFACE Bind server to IFACE, implies \-l
.Ve
.IP \fBpasswd\fR 4
.IX Item "passwd"
passwd [\-a ALG] [\-dlu] [USER]
.Sp
Change USER's password (default: current user)
.Sp
.Vb 4
\&        \-a ALG  des,md5,sha256/512 (default md5)
\&        \-d      Set password to \*(Aq\*(Aq
\&        \-l      Lock (disable) account
\&        \-u      Unlock (enable) account
.Ve
.IP \fBpgrep\fR 4
.IX Item "pgrep"
pgrep [\-flanovx] [\-s SID|\-P PPID|PATTERN]
.Sp
Display process(es) selected by regex PATTERN
.Sp
.Vb 9
\&        \-l      Show command name too
\&        \-a      Show command line too
\&        \-f      Match against entire command line
\&        \-n      Show the newest process only
\&        \-o      Show the oldest process only
\&        \-v      Negate the match
\&        \-x      Match whole name (not substring)
\&        \-s      Match session ID (0 for current)
\&        \-P      Match parent process ID
.Ve
.IP \fBpidof\fR 4
.IX Item "pidof"
pidof [NAME]...
.Sp
List PIDs of all processes with names that match NAMEs
.IP \fBping\fR 4
.IX Item "ping"
ping [OPTIONS] HOST
.Sp
Send ICMP ECHO_REQUESTs to HOST
.Sp
.Vb 10
\&        \-4,\-6           Force IP or IPv6 name resolution
\&        \-c CNT          Send only CNT pings
\&        \-s SIZE         Send SIZE data bytes in packets (default 56)
\&        \-i SECS         Interval
\&        \-A              Ping as soon as reply is received
\&        \-t TTL          Set TTL
\&        \-I IFACE/IP     Source interface or IP address
\&        \-W SEC          Seconds to wait for the first response (default 10)
\&                        (after all \-c CNT packets are sent)
\&        \-w SEC          Seconds until ping exits (default:infinite)
\&                        (can exit earlier with \-c CNT)
\&        \-q              Quiet, only display output at start/finish
\&        \-p HEXBYTE      Payload pattern
.Ve
.IP \fBping6\fR 4
.IX Item "ping6"
ping6 [OPTIONS] HOST
.Sp
Send ICMP ECHO_REQUESTs to HOST
.Sp
.Vb 11
\&        \-c CNT          Send only CNT pings
\&        \-s SIZE         Send SIZE data bytes in packets (default 56)
\&        \-i SECS         Interval
\&        \-A              Ping as soon as reply is received
\&        \-I IFACE/IP     Source interface or IP address
\&        \-W SEC          Seconds to wait for the first response (default 10)
\&                        (after all \-c CNT packets are sent)
\&        \-w SEC          Seconds until ping exits (default:infinite)
\&                        (can exit earlier with \-c CNT)
\&        \-q              Quiet, only display output at start/finish
\&        \-p HEXBYTE      Payload pattern
.Ve
.IP \fBpivot_root\fR 4
.IX Item "pivot_root"
pivot_root NEW_ROOT PUT_OLD
.Sp
Move the current root file system to PUT_OLD and make NEW_ROOT
the new root file system
.IP \fBpoweroff\fR 4
.IX Item "poweroff"
poweroff [\-d DELAY] [\-nf]
.Sp
Halt and shut off power
.Sp
.Vb 3
\&        \-d SEC  Delay interval
\&        \-n      Do not sync
\&        \-f      Force (don\*(Aqt go through init)
.Ve
.IP \fBprintf\fR 4
.IX Item "printf"
printf FORMAT [ARG]...
.Sp
Format and print ARG(s) according to FORMAT (a\-la C printf)
.IP \fBps\fR 4
.IX Item "ps"
ps
.Sp
Show list of processes
.Sp
.Vb 1
\&        w       Wide output
.Ve
.IP \fBpwd\fR 4
.IX Item "pwd"
pwd
.Sp
Print the full filename of the current working directory
.IP \fBreadlink\fR 4
.IX Item "readlink"
readlink [\-fnv] FILE
.Sp
Display the value of a symlink
.Sp
.Vb 3
\&        \-f      Canonicalize by following all symlinks
\&        \-n      Don\*(Aqt add newline
\&        \-v      Verbose
.Ve
.IP \fBreboot\fR 4
.IX Item "reboot"
reboot [\-d DELAY] [\-nf]
.Sp
Reboot the system
.Sp
.Vb 3
\&        \-d SEC  Delay interval
\&        \-n      Do not sync
\&        \-f      Force (don\*(Aqt go through init)
.Ve
.IP \fBreset\fR 4
.IX Item "reset"
reset
.Sp
Reset terminal (ESC codes) and termios (signals, buffering, echo)
.IP \fBresize\fR 4
.IX Item "resize"
resize
.Sp
Resize the screen
.IP \fBrm\fR 4
.IX Item "rm"
rm [\-irf] FILE...
.Sp
Remove (unlink) FILEs
.Sp
.Vb 3
\&        \-i      Always prompt before removing
\&        \-f      Never prompt
\&        \-R,\-r   Recurse
.Ve
.IP \fBrmdir\fR 4
.IX Item "rmdir"
rmdir [\-p] DIRECTORY...
.Sp
Remove DIRECTORY if it is empty
.Sp
.Vb 2
\&        \-p      Include parents
\&        \-\-ignore\-fail\-on\-non\-empty
.Ve
.IP \fBroute\fR 4
.IX Item "route"
route [\-ne] [\-A inet[6]] [{add|del} [\-net|\-host] TARGET [netmask MASK]
	[gw GATEWAY] [metric N] [mss BYTES] [window BYTES] [reject] [IFACE]]
.Sp
Show or edit kernel routing tables
.Sp
.Vb 3
\&        \-n      Don\*(Aqt resolve names
\&        \-e      Display other/more information
\&        \-A inet[6]      Select address family
.Ve
.IP \fBsed\fR 4
.IX Item "sed"
sed [\-i[SFX]] [\-nrE] [\-f FILE]... [\-e CMD]... [FILE]...
or: sed [\-i[SFX]] [\-nrE] CMD [FILE]...
.Sp
.Vb 6
\&        \-e CMD  Add CMD to sed commands to be executed
\&        \-f FILE Add FILE contents to sed commands to be executed
\&        \-i[SFX] Edit files in\-place (otherwise write to stdout)
\&                Optionally back files up, appending SFX
\&        \-n      Suppress automatic printing of pattern space
\&        \-r,\-E   Use extended regex syntax
.Ve
.Sp
If no \-e or \-f, the first non-option argument is the sed command string.
Remaining arguments are input files (stdin if none).
.IP \fBseq\fR 4
.IX Item "seq"
seq [\-w] [\-s SEP] [FIRST [INC]] LAST
.Sp
Print numbers from FIRST to LAST, in steps of INC.
FIRST, INC default to 1.
.Sp
.Vb 2
\&        \-w      Pad to last with leading zeros
\&        \-s SEP  String separator
.Ve
.IP \fBsh\fR 4
.IX Item "sh"
sh [\-il] [\-|+Cabefmnuvx] [\-|+o OPT]... [\-c 'SCRIPT' [ARG0 ARGS] | FILE ARGS | \-s ARGS]
.Sp
Unix shell interpreter
.IP \fBsha256sum\fR 4
.IX Item "sha256sum"
sha256sum [\-c[sw]] [FILE]...
.Sp
Print or check SHA256 checksums
.Sp
.Vb 3
\&        \-c      Check sums against list in FILEs
\&        \-s      Don\*(Aqt output anything, status code shows success
\&        \-w      Warn about improperly formatted checksum lines
.Ve
.IP \fBsleep\fR 4
.IX Item "sleep"
sleep [N]...
.Sp
Pause for a time equal to the total of the args given, where each arg can
have an optional suffix of (s)econds, (m)inutes, (h)ours, or (d)ays
.IP \fBsort\fR 4
.IX Item "sort"
sort [\-nru] [FILE]...
.Sp
Sort lines of text
.Sp
.Vb 5
\&        \-n      Sort numbers
\&        \-r      Reverse sort order
\&        \-s      Stable (don\*(Aqt sort ties alphabetically)
\&        \-u      Suppress duplicate lines
\&        \-z      NUL terminated input and output
.Ve
.IP \fBstart-stop-daemon\fR 4
.IX Item "start-stop-daemon"
start-stop-daemon [OPTIONS] [\-S|\-K] ... [\-\- ARGS...]
.Sp
Search for matching processes, and then
\&\-K: stop all matching processes
\&\-S: start a process unless a matching process is found
.Sp
Process matching:
.Sp
.Vb 10
\&        \-u USERNAME|UID Match only this user\*(Aqs processes
\&        \-n NAME         Match processes with NAME
\&                        in comm field in /proc/PID/stat
\&        \-x EXECUTABLE   Match processes with this command
\&                        in /proc/PID/cmdline
\&        \-p FILE         Match a process with PID from FILE
\&        All specified conditions must match
\&\-S only:
\&        \-x EXECUTABLE   Program to run
\&        \-a NAME         Zeroth argument
\&        \-b              Background
\&        \-c USER[:[GRP]] Change user/group
\&        \-m              Write PID to pidfile specified by \-p
\&\-K only:
\&        \-s SIG          Signal to send
\&        \-t              Match only, exit with 0 if found
\&Other:
\&
\&        \-q              Quiet
.Ve
.IP \fBstrings\fR 4
.IX Item "strings"
strings [\-fo] [\-t o|d|x] [\-n LEN] [FILE]...
.Sp
Display printable strings in a binary file
.Sp
.Vb 4
\&        \-f              Precede strings with filenames
\&        \-o              Precede strings with octal offsets
\&        \-t o|d|x        Precede strings with offsets in base 8/10/16
\&        \-n LEN          At least LEN characters form a string (default 4)
.Ve
.IP \fBswapoff\fR 4
.IX Item "swapoff"
swapoff [\-a] [DEVICE]
.Sp
Stop swapping on DEVICE
.Sp
.Vb 1
\&        \-a      Stop swapping on all swap devices
.Ve
.IP \fBswapon\fR 4
.IX Item "swapon"
swapon [\-a] [\-e] [\-d[POL]] [\-p PRI] [DEVICE]
.Sp
Start swapping on DEVICE
.Sp
.Vb 5
\&        \-a      Start swapping on all swap devices
\&        \-d[POL] Discard blocks at swapon (POL=once),
\&                as freed (POL=pages), or both (POL omitted)
\&        \-e      Silently skip devices that do not exist
\&        \-p PRI  Set swap device priority
.Ve
.IP \fBswitch_root\fR 4
.IX Item "switch_root"
switch_root [\-c CONSOLE_DEV] NEW_ROOT NEW_INIT [ARGS]
.Sp
Free initramfs and switch to another root fs:
.Sp
chroot to NEW_ROOT, delete all in /, move NEW_ROOT to /,
execute NEW_INIT. PID must be 1. NEW_ROOT must be a mountpoint.
.Sp
.Vb 1
\&        \-c DEV  Reopen stdio to DEV after switch
.Ve
.IP \fBsync\fR 4
.IX Item "sync"
sync
.Sp
Write all buffered blocks to disk
.IP \fBsysctl\fR 4
.IX Item "sysctl"
sysctl [\-enq] { \-a | \-p [FILE]... | [\-w] [KEY[=VALUE]]... }
.Sp
Show/set kernel parameters
.Sp
.Vb 6
\&        \-e      Don\*(Aqt warn about unknown keys
\&        \-n      Don\*(Aqt show key names
\&        \-q      Quiet
\&        \-a      Show all values
\&        \-p      Set values from FILEs (default /etc/sysctl.conf)
\&        \-w      Set values
.Ve
.IP \fBtail\fR 4
.IX Item "tail"
tail [OPTIONS] [FILE]...
.Sp
Print last 10 lines of FILEs (or stdin) to.
With more than one FILE, precede each with a filename header.
.Sp
.Vb 9
\&        \-c [+]N[bkm]    Print last N bytes
\&        \-n N[bkm]       Print last N lines
\&        \-n +N[bkm]      Start on Nth line and print the rest
\&                        (b:*512 k:*1024 m:*1024^2)
\&        \-q              Never print headers
\&        \-v              Always print headers
\&        \-f              Print data as file grows
\&        \-F              Same as \-f, but keep retrying
\&        \-s SECONDS      Wait SECONDS between reads with \-f
.Ve
.IP \fBtar\fR 4
.IX Item "tar"
tar c|x|t [\-zahvokO] [\-f TARFILE] [\-C DIR] [\-T FILE] [\-X FILE] [FILE]...
.Sp
Create, extract, or list files from a tar file
.Sp
.Vb 10
\&        c       Create
\&        x       Extract
\&        t       List
\&        \-f FILE Name of TARFILE (\*(Aq\-\*(Aq for stdin/out)
\&        \-C DIR  Change to DIR before operation
\&        \-v      Verbose
\&        \-O      Extract to stdout
\&        \-o      Don\*(Aqt restore user:group
\&        \-k      Don\*(Aqt replace existing files
\&        \-z      (De)compress using gzip
\&        \-a      (De)compress based on extension
\&        \-h      Follow symlinks
\&        \-T FILE File with names to include
\&        \-X FILE File with glob patterns to exclude
.Ve
.IP \fBtaskset\fR 4
.IX Item "taskset"
taskset [\-ap] [HEXMASK | \-c LIST] { PID | PROG ARGS }
.Sp
Set or get CPU affinity
.Sp
.Vb 3
\&        \-p      Operate on PID
\&        \-a      Operate on all threads
\&        \-c      Affinity is a list, not mask
.Ve
.IP \fBtee\fR 4
.IX Item "tee"
tee [\-ai] [FILE]...
.Sp
Copy stdin to each FILE, and also to stdout
.Sp
.Vb 2
\&        \-a      Append to the given FILEs, don\*(Aqt overwrite
\&        \-i      Ignore interrupt signals (SIGINT)
.Ve
.IP \fBtime\fR 4
.IX Item "time"
time [\-vpa] [\-o FILE] PROG ARGS
.Sp
Run PROG, display resource usage when it exits
.Sp
.Vb 5
\&        \-v      Verbose
\&        \-p      POSIX output format
\&        \-f FMT  Custom format
\&        \-o FILE Write result to FILE
\&        \-a      Append (else overwrite)
.Ve
.IP \fBtop\fR 4
.IX Item "top"
top [\-b] [\-n COUNT] [\-d SECONDS]
.Sp
Show a view of process activity in real time.
Read the status of all processes from /proc each SECONDS
and show a screenful of them.
.Sp
.Vb 3
\&        \-b      Batch mode
\&        \-n N    Exit after N iterations
\&        \-d SEC  Delay between updates
.Ve
.IP \fBtouch\fR 4
.IX Item "touch"
touch [\-cham] [\-d DATE] [\-t DATE] [\-r FILE] FILE...
.Sp
Update mtime of FILEs
.Sp
.Vb 7
\&        \-c      Don\*(Aqt create files
\&        \-h      Don\*(Aqt follow links
\&        \-a      Change only atime
\&        \-m      Change only mtime
\&        \-d DT   Date/time to use
\&        \-t DT   Date/time to use
\&        \-r FILE Use FILE\*(Aqs date/time
.Ve
.IP \fBtr\fR 4
.IX Item "tr"
tr [\-cds] STRING1 [STRING2]
.Sp
Translate, squeeze, or delete characters from stdin, writing to stdout
.Sp
.Vb 3
\&        \-c      Take complement of STRING1
\&        \-d      Delete input characters coded STRING1
\&        \-s      Squeeze multiple output characters of STRING2 into one character
.Ve
.IP \fBtraceroute\fR 4
.IX Item "traceroute"
traceroute [\-46Flnrv] [\-f 1ST_TTL] [\-m MAXTTL] [\-q PROBES] [\-p PORT]
	[\-t TOS] [\-w WAIT_SEC] [\-s SRC_IP] [\-i IFACE]
	[\-z PAUSE_MSEC] HOST [BYTES]
.Sp
Trace the route to HOST
.Sp
.Vb 10
\&        \-4,\-6   Force IP or IPv6 name resolution
\&        \-F      Set don\*(Aqt fragment bit
\&        \-l      Display TTL value of the returned packet
\&        \-n      Print numeric addresses
\&        \-r      Bypass routing tables, send directly to HOST
\&        \-v      Verbose
\&        \-f N    First number of hops (default 1)
\&        \-m N    Max number of hops
\&        \-q N    Number of probes per hop (default 3)
\&        \-p N    Base UDP port number used in probes
\&                (default 33434)
\&        \-s IP   Source address
\&        \-i IFACE Source interface
\&        \-t N    Type\-of\-service in probe packets (default 0)
\&        \-w SEC  Wait for a response (default 3)
\&        \-z MSEC Wait before each send
.Ve
.IP \fBtraceroute6\fR 4
.IX Item "traceroute6"
traceroute6 [\-nrv] [\-f 1ST_TTL] [\-m MAXTTL] [\-q PROBES] [\-p PORT]
	[\-t TOS] [\-w WAIT_SEC] [\-s SRC_IP] [\-i IFACE]
	[\-z PAUSE_MSEC] HOST [BYTES]
.Sp
Trace the route to HOST
.Sp
.Vb 10
\&        \-n      Print numeric addresses
\&        \-r      Bypass routing tables, send directly to HOST
\&        \-v      Verbose
\&        \-f N    First number of hops (default 1)
\&        \-m N    Max number of hops
\&        \-q N    Number of probes per hop (default 3)
\&        \-p N    Base UDP port number used in probes
\&                (default 33434)
\&        \-s IP   Source address
\&        \-i IFACE Source interface
\&        \-t N    Type\-of\-service in probe packets (default 0)
\&        \-w SEC  Wait for a response (default 3)
\&        \-z MSEC Wait before each send
.Ve
.IP \fBudhcpc\fR 4
.IX Item "udhcpc"
udhcpc [\-fbqRB] [\-t N] [\-T SEC] [\-A SEC|\-n]
	[\-i IFACE] [\-s PROG] [\-p PIDFILE]
	[\-oC] [\-r IP] [\-V VENDOR] [\-F NAME] [\-x OPT:VAL]... [\-O OPT]...
.Sp
.Vb 10
\&        \-i IFACE        Interface to use (default )
\&        \-s PROG         Run PROG at DHCP events (default /usr/share/udhcpc/default.script)
\&        \-p FILE         Create pidfile
\&        \-B              Request broadcast replies
\&        \-t N            Send up to N discover packets (default 3)
\&        \-T SEC          Pause between packets (default 3)
\&        \-A SEC          Wait if lease is not obtained (default 20)
\&        \-b              Background if lease is not obtained
\&        \-n              Exit if lease is not obtained
\&        \-q              Exit after obtaining lease
\&        \-R              Release IP on exit
\&        \-f              Run in foreground
\&        \-S              Log to syslog too
\&        \-r IP           Request this IP address
\&        \-o              Don\*(Aqt request any options (unless \-O is given)
\&        \-O OPT          Request option OPT from server (cumulative)
\&        \-x OPT:VAL      Include option OPT in sent packets (cumulative)
\&                        Examples of string, numeric, and hex byte opts:
\&                        \-x hostname:bbox \- option 12
\&                        \-x lease:3600 \- option 51 (lease time)
\&                        \-x 0x3d:0100BEEFC0FFEE \- option 61 (client id)
\&                        \-x 14:\*(Aq"dumpfile"\*(Aq \- option 14 (shell\-quoted)
\&        \-F NAME         Ask server to update DNS mapping for NAME
\&        \-V VENDOR       Vendor identifier (default \*(Aqudhcp VERSION\*(Aq)
\&        \-C              Don\*(Aqt send MAC as client identifier
\&Signals:
\&
\&        USR1    Renew lease
\&        USR2    Release lease
.Ve
.IP \fBumount\fR 4
.IX Item "umount"
umount [\-rlfda] [\-t FSTYPE] FILESYSTEM|DIRECTORY
.Sp
Unmount filesystems
.Sp
.Vb 6
\&        \-a      Unmount all filesystems
\&        \-r      Remount devices read\-only if mount is busy
\&        \-l      Lazy umount (detach filesystem)
\&        \-f      Force umount (i.e., unreachable NFS server)
\&        \-d      Free loop device if it has been used
\&        \-t FSTYPE[,...] Unmount only these filesystem type(s)
.Ve
.IP \fBuname\fR 4
.IX Item "uname"
uname [\-amnrspvio]
.Sp
Print system information
.Sp
.Vb 9
\&        \-a      Print all
\&        \-m      Machine (hardware) type
\&        \-n      Hostname
\&        \-r      Kernel release
\&        \-s      Kernel name (default)
\&        \-p      Processor type
\&        \-v      Kernel version
\&        \-i      Hardware platform
\&        \-o      OS name
.Ve
.IP \fBuniq\fR 4
.IX Item "uniq"
uniq [\-cduiz] [\-f,s,w N] [FILE [OUTFILE]]
.Sp
Discard duplicate lines
.Sp
.Vb 8
\&        \-c      Prefix lines by the number of occurrences
\&        \-d      Only print duplicate lines
\&        \-u      Only print unique lines
\&        \-i      Ignore case
\&        \-z      NUL terminated output
\&        \-f N    Skip first N fields
\&        \-s N    Skip first N chars (after any skipped fields)
\&        \-w N    Compare N characters in line
.Ve
.IP \fBuptime\fR 4
.IX Item "uptime"
uptime
.Sp
Display the time since the last boot
.IP \fBvi\fR 4
.IX Item "vi"
vi [\-c CMD] [\-R] [\-H] [FILE]...
.Sp
Edit FILE
.Sp
.Vb 3
\&        \-c CMD  Initial command to run ($EXINIT and ~/.exrc also available)
\&        \-R      Read\-only
\&        \-H      List available features
.Ve
.IP \fBwc\fR 4
.IX Item "wc"
wc [\-clwL] [FILE]...
.Sp
Count lines, words, and bytes for FILEs (or stdin)
.Sp
.Vb 4
\&        \-c      Count bytes
\&        \-l      Count newlines
\&        \-w      Count words
\&        \-L      Print longest line length
.Ve
.IP \fBwhich\fR 4
.IX Item "which"
which [\-a] COMMAND...
.Sp
Locate COMMAND
.Sp
.Vb 1
\&        \-a      Show all matches
.Ve
.IP \fBxargs\fR 4
.IX Item "xargs"
xargs [OPTIONS] [PROG ARGS]
.Sp
Run PROG on every item given by stdin
.Sp
.Vb 9
\&        \-0      NUL terminated input
\&        \-o      Reopen stdin as /dev/tty
\&        \-r      Don\*(Aqt run command if input is empty
\&        \-t      Print the command on stderr before execution
\&        \-p      Ask user whether to run each command
\&        \-E STR,\-e[STR]  STR stops input processing
\&        \-n N    Pass no more than N args to PROG
\&        \-s N    Pass command line of no more than N bytes
\&        \-x      Exit if size is exceeded
.Ve
.IP \fByes\fR 4
.IX Item "yes"
yes [STRING]
.Sp
Repeatedly print a line with STRING, or 'y'
.IP \fBzcat\fR 4
.IX Item "zcat"
zcat [FILE]...
.Sp
Decompress to stdout
.SH "LIBC NSS"
.IX Header "LIBC NSS"
GNU Libc (glibc) uses the Name Service Switch (NSS) to configure the behavior
of the C library for the local environment, and to configure how it reads
system data, such as passwords and group information.  This is implemented
using an /etc/nsswitch.conf configuration file, and using one or more of the
/lib/libnss_* libraries.  BusyBox tries to avoid using any libc calls that make
use of NSS.  Some applets however, such as login and su, will use libc functions
that require NSS.
.PP
If you enable CONFIG_USE_BB_PWD_GRP, BusyBox will use internal functions to
directly access the /etc/passwd, /etc/group, and /etc/shadow files without
using NSS.  This may allow you to run your system without the need for
installing any of the NSS configuration files and libraries.
.PP
When used with glibc, the BusyBox 'networking' applets will similarly require
that you install at least some of the glibc NSS stuff (in particular,
/etc/nsswitch.conf, /lib/libnss_dns*, /lib/libnss_files*, and /lib/libresolv*).
.PP
Shameless Plug: As an alternative, one could use a C library such as uClibc.  In
addition to making your system significantly smaller, uClibc does not require the
use of any NSS support files or libraries.
.SH MAINTAINER
.IX Header "MAINTAINER"
Denis Vlasenko <vda.linux@googlemail.com>
.SH AUTHORS
.IX Header "AUTHORS"
The following people have contributed code to BusyBox whether they know it or
not.  If you have written code included in BusyBox, you should probably be
listed here so you can obtain your bit of eternal glory.  If you should be
listed here, or the description of what you have done needs more detail, or is
incorrect, please send in an update.
.PP
Emanuele Aina <emanuele.aina@tiscali.it>
.PP
.Vb 1
\&    run\-parts
.Ve
.PP
Erik Andersen <andersen@codepoet.org>
.PP
.Vb 4
\&    Tons of new stuff, major rewrite of most of the
\&    core apps, tons of new apps as noted in header files.
\&    Lots of tedious effort writing these boring docs that
\&    nobody is going to actually read.
.Ve
.PP
Laurence Anderson <l.d.anderson@warwick.ac.uk>
.PP
.Vb 1
\&    rpm2cpio, unzip, get_header_cpio, read_gz interface, rpm
.Ve
.PP
Jeff Angielski <jeff@theptrgroup.com>
.PP
.Vb 1
\&    ftpput, ftpget
.Ve
.PP
Edward Betts <edward@debian.org>
.PP
.Vb 1
\&    expr, hostid, logname, whoami
.Ve
.PP
John Beppu <beppu@codepoet.org>
.PP
.Vb 1
\&    du, nslookup, sort
.Ve
.PP
Brian Candler <B.Candler@pobox.com>
.PP
.Vb 1
\&    tiny\-ls(ls)
.Ve
.PP
Randolph Chung <tausq@debian.org>
.PP
.Vb 1
\&    fbset, ping, hostname
.Ve
.PP
Dave Cinege <dcinege@psychosis.com>
.PP
.Vb 2
\&    more(v2), makedevs, dutmp, modularization, auto links file,
\&    various fixes, Linux Router Project maintenance
.Ve
.PP
Jordan Crouse <jordan@cosmicpenguin.net>
.PP
.Vb 1
\&    ipcalc
.Ve
.PP
Magnus Damm <damm@opensource.se>
.PP
.Vb 1
\&    tftp client insmod powerpc support
.Ve
.PP
Larry Doolittle <ldoolitt@recycle.lbl.gov>
.PP
.Vb 1
\&    pristine source directory compilation, lots of patches and fixes.
.Ve
.PP
Glenn Engel <glenne@engel.org>
.PP
.Vb 1
\&    httpd
.Ve
.PP
Gennady Feldman <gfeldman@gena01.com>
.PP
.Vb 2
\&    Sysklogd (single threaded syslogd, IPC Circular buffer support,
\&    logread), various fixes.
.Ve
.PP
Karl M. Hegbloom <karlheg@debian.org>
.PP
.Vb 1
\&    cp_mv.c, the test suite, various fixes to utility.c, &c.
.Ve
.PP
Daniel Jacobowitz <dan@debian.org>
.PP
.Vb 1
\&    mktemp.c
.Ve
.PP
Matt Kraai <kraai@alumni.cmu.edu>
.PP
.Vb 1
\&    documentation, bugfixes, test suite
.Ve
.PP
Stephan Linz <linz@li\-pro.net>
.PP
.Vb 1
\&    ipcalc, Red Hat equivalence
.Ve
.PP
John Lombardo <john@deltanet.com>
.PP
.Vb 1
\&    tr
.Ve
.PP
Glenn McGrath <bug1@iinet.net.au>
.PP
.Vb 3
\&    Common unarchiving code and unarchiving applets, ifupdown, ftpgetput,
\&    nameif, sed, patch, fold, install, uudecode.
\&    Various bugfixes, review and apply numerous patches.
.Ve
.PP
Manuel Novoa III <mjn3@codepoet.org>
.PP
.Vb 3
\&    cat, head, mkfifo, mknod, rmdir, sleep, tee, tty, uniq, usleep, wc, yes,
\&    mesg, vconfig, make_directory, parse_mode, dirname, mode_string,
\&    get_last_path_component, simplify_path, and a number trivial libbb routines
\&
\&    also bug fixes, partial rewrites, and size optimizations in
\&    ash, basename, cal, cmp, cp, df, du, echo, env, ln, logname, md5sum, mkdir,
\&    mv, realpath, rm, sort, tail, touch, uname, watch, arith, human_readable,
\&    interface, dutmp, ifconfig, route
.Ve
.PP
Vladimir Oleynik <dzo@simtreas.ru>
.PP
.Vb 4
\&    cmdedit; xargs(current), httpd(current);
\&    ports: ash, crond, fdisk, inetd, stty, traceroute, top;
\&    locale, various fixes
\&    and irreconcilable critic of everything not perfect.
.Ve
.PP
Bruce Perens <bruce@pixar.com>
.PP
.Vb 2
\&    Original author of BusyBox in 1995, 1996. Some of his code can
\&    still be found hiding here and there...
.Ve
.PP
Tim Riker <Tim@Rikers.org>
.PP
.Vb 1
\&    bug fixes, member of fan club
.Ve
.PP
Kent Robotti <robotti@metconnect.com>
.PP
.Vb 1
\&    reset, tons and tons of bug reports and patches.
.Ve
.PP
Chip Rosenthal <chip@unicom.com>, <crosenth@covad.com>
.PP
.Vb 1
\&    wget \- Contributed by permission of Covad Communications
.Ve
.PP
Pavel Roskin <proski@gnu.org>
.PP
.Vb 1
\&    Lots of bugs fixes and patches.
.Ve
.PP
Gyepi Sam <gyepi@praxis\-sw.com>
.PP
.Vb 1
\&    Remote logging feature for syslogd
.Ve
.PP
Linus Torvalds <torvalds@transmeta.com>
.PP
.Vb 1
\&    mkswap, fsck.minix, mkfs.minix
.Ve
.PP
Mark Whitley <markw@codepoet.org>
.PP
.Vb 2
\&    grep, sed, cut, xargs(previous),
\&    style\-guide, new\-applet\-HOWTO, bug fixes, etc.
.Ve
.PP
Charles P. Wright <cpwright@villagenet.com>
.PP
.Vb 1
\&    gzip, mini\-netcat(nc)
.Ve
.PP
Enrique Zanardi <ezanardi@ull.es>
.PP
.Vb 1
\&    tarcat (since removed), loadkmap, various fixes, Debian maintenance
.Ve
.PP
Tito Ragusa <farmatito@tiscali.it>
.PP
.Vb 1
\&    devfsd and size optimizations in strings, openvt and deallocvt.
.Ve
.PP
Paul Fox <pgf@foxharp.boston.ma.us>
.PP
.Vb 1
\&    vi editing mode for ash, various other patches/fixes
.Ve
.PP
Roberto A. Foglietta <me@roberto.foglietta.name>
.PP
.Vb 1
\&    port: dnsd
.Ve
.PP
Bernhard Reutner-Fischer <rep.dot.nop@gmail.com>
.PP
.Vb 1
\&    misc
.Ve
.PP
Mike Frysinger <vapier@gentoo.org>
.PP
.Vb 1
\&    initial e2fsprogs, printenv, setarch, sum, misc
.Ve
.PP
Jie Zhang <jie.zhang@analog.com>
.PP
.Vb 1
\&    fixed two bugs in msh and hush (exitcode of killed processes)
.Ve
